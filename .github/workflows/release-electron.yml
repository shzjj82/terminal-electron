name: Build and Release Electron Apps

on:
  release:
    types: [published]
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-matrix:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Install dependencies (root)
        run: yarn install --frozen-lockfile

      - name: Install dependencies (apps/app)
        working-directory: apps/app
        run: yarn install --frozen-lockfile || true

      - name: Load environment variables
        shell: bash
        run: |
          if [ -f "env/production.env" ]; then
            echo "Loading production environment variables..."
            # 读取环境变量文件并设置到 GitHub Actions 环境
            while IFS= read -r line; do
              # 去除行首行尾的空白字符
              line=$(echo "$line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
              # 跳过注释、空行和只包含等号的行
              if [[ ! "$line" =~ ^# ]] && [[ -n "$line" ]] && [[ "$line" =~ = ]]; then
                # 提取变量名和值
                var_name=$(echo "$line" | cut -d'=' -f1 | sed 's/[[:space:]]*$//')
                var_value=$(echo "$line" | cut -d'=' -f2- | sed 's/^[[:space:]]*//')
                # 确保变量名不为空且不包含空格
                if [[ -n "$var_name" ]] && [[ ! "$var_name" =~ [[:space:]] ]]; then
                  # 设置到 GitHub Actions 环境
                  echo "${var_name}=${var_value}" >> $GITHUB_ENV
                  echo "Set ${var_name}=${var_value}"
                fi
              fi
            done < env/production.env
            echo "Production environment variables loaded"
          else
            echo "Warning: env/production.env not found, using defaults"
          fi

      - name: Build on macOS (arm64 + x64)
        if: matrix.os == 'macos-latest'
        working-directory: apps/app
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_ENV: production
          CI: true
          API_BASE_URL: ${{ env.API_BASE_URL }}
          API_TIMEOUT: ${{ env.API_TIMEOUT }}
          BUILD_TARGET: ${{ env.BUILD_TARGET }}
        run: |
          yarn build:mac:arm64
          yarn build:mac:x64

      - name: Build on Windows (x64 + arm64)
        if: matrix.os == 'windows-latest'
        shell: bash
        working-directory: apps/app
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_ENV: production
          CI: true
          API_BASE_URL: ${{ env.API_BASE_URL }}
          API_TIMEOUT: ${{ env.API_TIMEOUT }}
          BUILD_TARGET: ${{ env.BUILD_TARGET }}
        run: |
          yarn build:win:x64
          yarn build:win:arm64

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-${{ runner.os }}
          path: |
            apps/app/release/**/*

  attach-release:
    name: "[Aggregator] Upload Release Assets"
    runs-on: ubuntu-latest
    needs: build-matrix
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: electron-*
          merge-multiple: true
          path: dist-release

      - name: Display downloaded files
        shell: bash
        run: |
          ls -al dist-release || true
          echo "Will upload these:" 
          find dist-release -type f \( -name "*.dmg" -o -name "*.exe" \) -print || true

      - name: Filter specific files
        shell: bash
        run: |
          mkdir -p filtered-release
          # 显示所有可用文件
          echo "Available files in dist-release:"
          find dist-release -type f \( -name "*.dmg" -o -name "*.exe" \) -print
          
          # 只保留指定的文件（排除 unpacked 目录和没有架构标识的文件）
          find dist-release -maxdepth 1 -name "Terminal.Electron.Setup-x64.exe" -exec cp {} filtered-release/ \;
          find dist-release -maxdepth 1 -name "Terminal.Electron.Setup-arm64.exe" -exec cp {} filtered-release/ \;
          find dist-release -maxdepth 1 -name "Terminal.Electron-x64.dmg" -exec cp {} filtered-release/ \;
          find dist-release -maxdepth 1 -name "Terminal.Electron-arm64.dmg" -exec cp {} filtered-release/ \;
          
          echo "Filtered files:"
          ls -la filtered-release/ || echo "No files found"
          
          # 检查是否找到了文件
          if [ ! "$(ls -A filtered-release)" ]; then
            echo "ERROR: No files matched the filter criteria!"
            echo "Expected files:"
            echo "  - Terminal.Electron.Setup-x64.exe"
            echo "  - Terminal.Electron.Setup-arm64.exe"
            echo "  - Terminal.Electron-x64.dmg"
            echo "  - Terminal.Electron-arm64.dmg"
            exit 1
          fi

      - name: Upload to GitHub Release assets
        uses: ncipollo/release-action@v1
        with:
          artifacts: |
            filtered-release/Terminal.Electron.Setup-x64.exe
            filtered-release/Terminal.Electron.Setup-arm64.exe
            filtered-release/Terminal.Electron-x64.dmg
            filtered-release/Terminal.Electron-arm64.dmg
          allowUpdates: true
          replacesArtifacts: true
          artifactErrorsFailBuild: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}